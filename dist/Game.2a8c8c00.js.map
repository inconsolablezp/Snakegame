{"version":3,"sources":["src/Map.ts","src/Snake.ts","src/Game.ts"],"names":[],"mappings":"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","file":"Game.2a8c8c00.js","sourceRoot":"..","sourcesContent":["import Snake from \"./Snake\";\r\n\r\nlet alltd:Array<any>[] = [];\r\nlet randomx:number;\r\nlet randomy:number;\r\nlet showapple:Boolean = true;\r\nexport default class Map{\r\n    height:number;\r\n    width:number;\r\n    constructor(hi:number,wid:number)\r\n    {\r\n        this.height = hi;\r\n        this.width = wid;\r\n    }\r\n\r\n    createMap(divName:string){\r\n        const elt = document.getElementById(divName);\r\n        for (let index = 0; index < this.height; index++) {\r\n            const tr = elt?.appendChild(document.createElement(\"tr\"));\r\n            const tdarray = [];\r\n            for (let j = 0; j < this.width; j++) {\r\n                const td = tr?.appendChild(document.createElement(\"td\"));\r\n                tdarray[j] = td;\r\n            }\r\n            alltd[index] = tdarray;\r\n        }\r\n    }\r\n    //产生一个苹果\r\n    showFood(snake:Snake){\r\n        const length = snake.body.length;\r\n        let random = [];\r\n        for (let index = 0; index < this.height; index++) {\r\n            for (let j = 0; j < this.width; j++) {\r\n                if (!snake.body.some(item => item.x === index && item.y === j)){\r\n                    random.push({x:index,y:j});\r\n                } \r\n            }\r\n        }\r\n        let rondlen = random.length;\r\n        let idx = Math.ceil(rondlen * Math.random());\r\n        randomx = random[idx].x;\r\n        randomy = random[idx].y;\r\n        this.ShowApp = false;\r\n        alltd[randomx][randomy].style.background = \"green\";\r\n    }\r\n\r\n    public get Randomx():number\r\n    {\r\n        return randomx;\r\n    }\r\n\r\n    public get Randomy():number{\r\n        return randomy;\r\n    }\r\n\r\n    get Showapp():Boolean{\r\n        return showapple;\r\n    }\r\n\r\n    set ShowApp(va:Boolean){\r\n        showapple = va;\r\n    }\r\n\r\n    //画蛇\r\n    displaySnake(snake:Snake){\r\n        const length = snake.body.length;\r\n        for (let i = 0;i < length;i++)\r\n        {\r\n            const x =  snake.body[i].x;\r\n            const y =  snake.body[i].y;\r\n            if (i === 0){\r\n                alltd[x][y].style.background = \"blue\";\r\n            }else{\r\n                alltd[x][y].style.background = \"red\";\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    //之前的蛇去掉\r\n    clearSnake(snake:Snake){\r\n        alltd.forEach((value,i)=>{\r\n            value.forEach((v,j) =>{\r\n                if (!(i === randomx && j === randomy)){\r\n                    v.style.background = \"\";\r\n                }  \r\n            })\r\n        }\r\n        );\r\n    }\r\n\r\n    //清除食物\r\n    clearfood(){\r\n        alltd[randomx][randomy].style.background = \"\";\r\n    }\r\n    \r\n}","export enum DirectionType {\r\n  UP,\r\n  DOWN,\r\n  LEFT,\r\n  RIGHT,\r\n}\r\nimport Map from \"./Map\";\r\nexport default class Snake {\r\n  body: { x: number; y: number }[] = [];\r\n  direction: DirectionType;\r\n  map:Map;\r\n  constructor(height: number, width: number, direction: DirectionType,map:Map) {\r\n    this.body.push({ x: Math.floor(height / 2), y: Math.floor(width / 2) });\r\n    this.body.push({ x: Math.floor(height / 2 + 1), y: Math.floor(width / 2) });\r\n    this.body.push({ x: Math.floor(height / 2 + 2), y: Math.floor(width / 2) });\r\n    this.direction = direction;\r\n    this.map = map;\r\n  }\r\n\r\n  move() {\r\n    const length = this.body.length;\r\n    let x: number;\r\n    let y: number;\r\n    switch (this.direction) {\r\n      case DirectionType.UP:\r\n        x = this.body[0].x - 1;\r\n        y = this.body[0].y;\r\n        break;\r\n      case DirectionType.DOWN:\r\n        x = this.body[0].x + 1;\r\n        y = this.body[0].y;\r\n        break;\r\n      case DirectionType.LEFT:\r\n        x = this.body[0].x;\r\n        y = this.body[0].y - 1;\r\n        break;\r\n      case DirectionType.RIGHT:\r\n        x = this.body[0].x;\r\n        y = this.body[0].y + 1;\r\n        break;\r\n    }\r\n    if (x === this.map.Randomx && y === this.map.Randomy){\r\n      this.body.unshift({ x, y });\r\n      this.map.ShowApp = true;\r\n    }\r\n    else{\r\n      this.body.pop();\r\n      this.body.unshift({ x, y });\r\n    }\r\n  }\r\n\r\n  turnLeft() {\r\n    if ([DirectionType.LEFT, DirectionType.RIGHT].includes(this.direction))\r\n      return;\r\n    this.direction = DirectionType.LEFT;\r\n  }\r\n\r\n  turnup() {\r\n    if ([DirectionType.UP, DirectionType.DOWN].includes(this.direction)) return;\r\n    this.direction = DirectionType.UP;\r\n  }\r\n\r\n  turndown() {\r\n    if ([DirectionType.UP, DirectionType.DOWN].includes(this.direction)) return;\r\n    this.direction = DirectionType.DOWN;\r\n  }\r\n\r\n  turnright() {\r\n    if ([DirectionType.LEFT, DirectionType.RIGHT].includes(this.direction))\r\n      return;\r\n    this.direction = DirectionType.RIGHT;\r\n  }\r\n}\r\n","import Map from \"./Map\";\r\nimport Snake, { DirectionType } from \"./Snake\";\r\nclass Game {\r\n  map: Map;\r\n  snake: Snake;\r\n  private _start:boolean = false;\r\n  private _timer:any;\r\n  constructor() {\r\n    this.map = new Map(20, 20);\r\n    this.map.createMap(\"map\");\r\n    this.snake = new Snake(8, 8, DirectionType.UP,this.map);\r\n    this.map.displaySnake(this.snake);\r\n    window.addEventListener(\"keydown\", this.keydown, false);\r\n  }\r\n\r\n  private move = () => {\r\n    this.map.clearSnake(this.snake);\r\n    if (this.map.Showapp)\r\n      this.map.showFood(this.snake);\r\n    this.snake.move();\r\n    this._gameover(this.snake);\r\n    this.map.displaySnake(this.snake);\r\n  }\r\n\r\n  private _gameover = (snake:Snake)=>{\r\n      let x = snake.body[0].x;\r\n      let y = snake.body[0].y;\r\n      let newsnake = snake.body.slice(1);\r\n      if (x < 0 || y < 0  || x > this.map.height - 1 || y > this.map.width - 1 || newsnake.some(item => item.x === x && item.y === y)){\r\n            alert(\"gameover\");\r\n            this.snake = new Snake(this.map.height, this.map.width, DirectionType.UP,this.map);\r\n            clearInterval(this._timer);\r\n            this._start = false;\r\n            this.map.clearfood();\r\n      }\r\n  }\r\n\r\n  private keydown = (event: KeyboardEvent) => {\r\n    if (!this._start){\r\n        this._timer = setInterval(this.move,200);\r\n        this._start = true;\r\n    }\r\n    switch (event.keyCode) {\r\n      case 37: //左\r\n        this.snake.turnLeft();\r\n        break;\r\n      case 38: //上\r\n        this.snake.turnup();\r\n        break;\r\n      case 39: //右\r\n        this.snake.turnright();\r\n        break;\r\n      case 40: //下\r\n        this.snake.turndown();\r\n        break;\r\n    }\r\n  };\r\n}\r\n\r\nnew Game();\r\n"]}